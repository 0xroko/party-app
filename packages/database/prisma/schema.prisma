generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

model Users {
  id                  String       @id @default(dbgenerated("uuid_generate_v4()"))
  name                String
  surname             String
  username            String       @unique
  bio                 String?
  profile_pic_url     String?
  push_token          String?
  imagesId            String?
  friendshipId        String?
  supabaseId          String       @unique @db.Uuid
  Attending           Attending[]
  Comment             Comment[]
  FriendshipA         Friendship[] @relation("UserA")
  FriendshipB         Friendship[] @relation("UserB")
  Images              Images?      @relation("ImageAuthor")
  Message             Message[]
  hostedParties       Party[]      @relation("HostedParties")
  UsersTaggedInImages Images?      @relation("TaggedUsers", fields: [imagesId], references: [id])
  expoPushToken       String?

  @@schema("public")
}

model Friendship {
  id        String   @id @default(dbgenerated("uuid_generate_v4()"))
  userAId   String
  userBId   String
  accepted  Boolean  @default(false)
  createdAt DateTime @default(now())
  userA     Users    @relation("UserA", fields: [userAId], references: [id])
  userB     Users    @relation("UserB", fields: [userBId], references: [id])

  @@unique([userAId, userBId])
  @@schema("public")
}

model Party {
  id            String      @id @default(dbgenerated("uuid_generate_v4()"))
  name          String
  location      String
  hostId        String
  time_starting DateTime
  chatId        String      @unique
  tags          String[]
  ended         Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Attending     Attending[]
  PartyChat     Chat?
  Images        Images[]
  host          Users       @relation("HostedParties", fields: [hostId], references: [id])

  @@schema("public")
}

model Attending {
  id        String   @id @default(dbgenerated("uuid_generate_v4()"))
  partyId   String
  userId    String
  createdAt DateTime @default(now())
  party     Party    @relation(fields: [partyId], references: [id])
  user      Users    @relation(fields: [userId], references: [id])

  @@schema("public")
}

model Chat {
  id        String    @id @default(dbgenerated("uuid_generate_v4()"))
  partyId   String    @unique
  createdAt DateTime  @default(now())
  Party     Party     @relation(fields: [partyId], references: [id])
  messages  Message[]

  @@schema("public")
}

model Message {
  id        String   @id @default(dbgenerated("uuid_generate_v4()"))
  chatId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    Users    @relation(fields: [senderId], references: [id])

  @@schema("public")
}

model Images {
  id          String    @id @default(dbgenerated("uuid_generate_v4()"))
  pic_url     String
  partyId     String
  description String
  authorId    String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Comment     Comment[]
  author      Users     @relation("ImageAuthor", fields: [authorId], references: [id])
  party       Party     @relation(fields: [partyId], references: [id])
  tagged_user Users[]   @relation("TaggedUsers")

  @@schema("public")
}

model Comment {
  id        String   @id @default(dbgenerated("uuid_generate_v4()"))
  content   String
  authorId  String
  imageId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    Users    @relation(fields: [authorId], references: [id])
  image     Images   @relation(fields: [imageId], references: [id])

  @@schema("public")
}
